{% extends 'base.html.twig' %}

{% block title %}Recherche de salles{% endblock %}

{% block body %}
    <div class="container mt-4">
        <h1 id="page-title">Recherche de salles</h1>

        <div id="search-form-container">
            {{ form_start(form, {'attr': {'id': 'search-form', 'data-turbo': 'false'}}) }}
            {{ form_errors(form) }}
            {{ form_widget(form) }}
            <button type="submit" id="search-button" class="btn btn-primary">Rechercher</button>
            {{ form_end(form) }}
        </div>

        <div id="results-container" class="mt-4">
            {% if rooms is defined %}
                {% include 'room/_results.html.twig' with {'rooms': rooms, 'hideTitle': true} %}
            {% endif %}
        </div>

        <div class="mt-3">
            <a href="{{ path('app_room_new') }}" class="btn btn-success">Cr√©er une nouvelle salle</a>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('search-form');
            const formContainer = document.getElementById('search-form-container');
            const resultsContainer = document.getElementById('results-container');
            const searchButton = document.getElementById('search-button');
            const pageTitle = document.getElementById('page-title');

            form.addEventListener('submit', function (e) {
                e.preventDefault();
                console.log('Form submitted');

                const formData = new FormData(form);
                console.log('Form data:', Object.fromEntries(formData));

                fetch(form.action, {
                    method: form.method,
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                }).then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                }).then(html => {
                    console.log('Response received');
                    resultsContainer.innerHTML = html;
                    resultsContainer.style.display = 'block';
                    formContainer.style.display = 'none';
                    searchButton.textContent = 'Nouvelle recherche';
                    pageTitle.style.display = 'block';
                }).catch(error => {
                    console.error('Error:', error);
                });
            });

            searchButton.addEventListener('click', function (e) {
                if (formContainer.style.display === 'none') {
                    e.preventDefault();
                    formContainer.style.display = 'block';
                    resultsContainer.style.display = 'none';
                    this.textContent = 'Rechercher';
                }
            });
        });
    </script>
{% endblock %}